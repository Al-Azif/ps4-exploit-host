#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Easy PS4 Exploit Hosting by Al-Azif
   Source: https://github.com/Al-Azif/ps4-exploit-host
"""

from __future__ import print_function

import argparse
import os
import socket
import time

SCRIPT_LOC = os.path.realpath(__file__)
CWD = os.path.dirname(SCRIPT_LOC)


def netcat(hostname, port, content):
    """Python netcat implementation"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    timeout = time.time() + 60
    while True:
        result = s.connect_ex((hostname, port))
        if result == 0:
            print('>> Connected to PS4')
            timed_out = False
            break
        if time.time() >= timeout:
            print('>> Netcat service timed out')
            timed_out = True
            break
    if not timed_out:
        s.sendall(content)
        s.shutdown(socket.SHUT_WR)
        while 1:
            data = s.recv(1024)
            if not data:
                break
        print('>> Payload Sent!')
    s.close()


def main():
    """The main method"""
    parser = argparse.ArgumentParser(description='PS4 Payload Sender')
    parser.add_argument('--ip', action='store',
                        default='', required=True,
                        help='The IP of the PS4')
    parser.add_argument('--payload', action='store',
                        default='', required=False,
                        help='The location of the payload')
    parser.add_argument('--all', action='store_true',
                        required=False,
                        help='Send all payloads from payloads directory')
    args = parser.parse_args()

    if not args.ip and not args.payload and not args.all:
        parser.print_help()
    elif args.ip and args.all:
        print('>> Attempting to send all payloads in the payloads directory')
        payloads = []
        for entry in os.listdir(os.path.join(CWD, 'payloads')):
            if entry.endswith('.bin'):
                payloads.append(entry)
        if not payloads:
            print('>> No payloads found')
        for payload in payloads:
            print('>> Sending "/payloads/{}" to {}'.format(payload, args.ip))
            with open(os.path.join(CWD, 'payloads', payload), 'rb') as f:
                content = f.read()
                netcat(args.ip, 9020, content)
    elif args.ip and args.payload:
        try:
            print('>> Sending "{}" to {}'.format(args.payload, args.ip))
            with open(os.path.join(args.payload), 'rb') as f:
                content = f.read()
                netcat(args.ip, 9020, content)
        except IOError:
            print('>> Could not find payload located at "{}"'.format(args.payload))


if __name__ == '__main__':
    main()
